package com.exie.domainview;

import com.exie.mjeedom.ServiceFactory;
import com.exie.mjeedom.User;
import com.exie.scalalib.UserFactory;
import java.io.Serializable;
import java.util.Date;
import java.util.logging.Logger;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
final class DomainViewTopComponent extends TopComponent {

    private static DomainViewTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "DomainViewTopComponent";

    private DomainViewTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(DomainViewTopComponent.class, "CTL_DomainViewTopComponent"));
        setToolTipText(NbBundle.getMessage(DomainViewTopComponent.class, "HINT_DomainViewTopComponent"));
//        setIcon(Utilities.loadImage(ICON_PATH, true));

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        nameLabel = new javax.swing.JLabel();
        createUserButton = new javax.swing.JButton();
        nameField = new javax.swing.JTextField();
        remoteUserLabel = new javax.swing.JLabel();
        remoteField = new javax.swing.JTextField();
        createRemoteButton = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(nameLabel, org.openide.util.NbBundle.getMessage(DomainViewTopComponent.class, "DomainViewTopComponent.nameLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(createUserButton, org.openide.util.NbBundle.getMessage(DomainViewTopComponent.class, "DomainViewTopComponent.createUserButton.text")); // NOI18N
        createUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createUserButtonActionPerformed(evt);
            }
        });

        nameField.setText(org.openide.util.NbBundle.getMessage(DomainViewTopComponent.class, "DomainViewTopComponent.nameField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(remoteUserLabel, org.openide.util.NbBundle.getMessage(DomainViewTopComponent.class, "DomainViewTopComponent.remoteUserLabel.text")); // NOI18N

        remoteField.setText(org.openide.util.NbBundle.getMessage(DomainViewTopComponent.class, "DomainViewTopComponent.remoteField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(createRemoteButton, org.openide.util.NbBundle.getMessage(DomainViewTopComponent.class, "DomainViewTopComponent.createRemoteButton.text_1")); // NOI18N
        createRemoteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createRemoteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(remoteUserLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(remoteField, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(nameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nameField, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(createUserButton)
                            .addComponent(createRemoteButton))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {nameLabel, remoteUserLabel});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(createUserButton)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(remoteUserLabel)
                    .addComponent(remoteField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(createRemoteButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void createUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createUserButtonActionPerformed
        User user = createUser();
        nameField.setText(user.getName());
    }//GEN-LAST:event_createUserButtonActionPerformed

    private void createRemoteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createRemoteButtonActionPerformed
        System.out.println("Looking for ServiceFactory");
        for (ServiceFactory factory : Lookup.getDefault().lookupAll(ServiceFactory.class)) {
            System.out.println("Ping: " + factory.createMyServiceRemote().ping());
            remoteField.setText(factory.createMyServiceRemote().getHello(remoteField.getName()));
        }

    }//GEN-LAST:event_createRemoteButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton createRemoteButton;
    private javax.swing.JButton createUserButton;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField remoteField;
    private javax.swing.JLabel remoteUserLabel;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized DomainViewTopComponent getDefault() {
        if (instance == null) {
            instance = new DomainViewTopComponent();
        }
        return instance;
    }


    public User createUser() {
        return UserFactory.createUser("Scala User", new Date());
    }


    /**
     * Obtain the DomainViewTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized DomainViewTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(DomainViewTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof DomainViewTopComponent) {
            return (DomainViewTopComponent) win;
        }
        Logger.getLogger(DomainViewTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    /** replaces this in object stream */
    @Override
    public Object writeReplace() {
        return new ResolvableHelper();
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    final static class ResolvableHelper implements Serializable {

        private static final long serialVersionUID = 1L;

        public Object readResolve() {
            return DomainViewTopComponent.getDefault();
        }
    }
}
